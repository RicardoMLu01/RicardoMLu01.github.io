<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ricardo Blogs</title>
  
  <subtitle>NOTE</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="images/avatar.gif/"/>
  <updated>2019-02-07T07:40:13.001Z</updated>
  <id>images/avatar.gif/</id>
  
  <author>
    <name>RicardoMLu01</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>构建技术知识体系，让自己含金量更高</title>
    <link href="images/avatar.gif/2019/02/07/%E6%9E%84%E5%BB%BA%E6%8A%80%E6%9C%AF%E7%9F%A5%E8%AF%86%E4%BD%93%E7%B3%BB%EF%BC%8C%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%90%AB%E9%87%91%E9%87%8F%E6%9B%B4%E9%AB%98/"/>
    <id>images/avatar.gif/2019/02/07/构建技术知识体系，让自己含金量更高/</id>
    <published>2019-02-07T06:21:18.000Z</published>
    <updated>2019-02-07T07:40:13.001Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix csdn-tracking-statistics" data-pid="blog" data-mod="popu_307" data-dsm="post"><br>                                            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-2c6a5211c9.css"><br>                        <div class="htmledit_views" id="content_views"><br>                <blockquote style="font-size:14px;border-left-width:5px;border-left-style:solid;border-left-color:rgba(128,128,128,.0745098);color:rgb(51,51,51);font-family:'microsoft yahei', arial;line-height:27.2px;text-align:justify;background:rgb(247,247,247);"><p>作者简介：<a href="http://my.csdn.net/foruok" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">安晓辉</a>，10多年开发经验，曾任软件开发工程师、项目经理、研发经理、技术总监等岗位，著有《Qt Quick核心编程》、《Qt on Android核心编程》、《你好哇，程序员》等书籍。“斜杠青年”：技术专家 / 职业规划师 /&nbsp;<a href="http://blog.csdn.net/foruok" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">图书作者</a>&nbsp;/&nbsp;<a href="http://www.zaih.com/mentor/84779110/" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">在行</a>西安首批行家 /<a href="http://fd.zaih.com/tutor/587470986" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">分答职场类答主</a>&nbsp;/微信公众号“程序视界”（id：programmer_sight）/ LinkedIn受邀自媒体。</p><p>责编：CSDN知识图谱小助手</p></blockquote><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">这个时代，信息极大丰富，人每时每刻都被各种各样的知识、信息轰炸着。如何有效的选择对自己有价值的知识，如何构建一个<span style="font-weight:700;">独属于自己的知识体系</span>并让它为自己创造价值，变得越来越重要。只有知识经过了你的选择和应用，内化为自己的隐性经验，纳入到你的知识体系中，才能真正地为你创造财富。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">怎样才能建立自己的知识体系呢？</span></p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>选择方向，设定目标</li><li>学习、实践、输出、内化</li><li>同主题扩散</li><li>运用工具整理记录知识图谱</li><li>迭代与更新知识图谱</li></ul><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t0"></a><span style="font-weight:700;">有目标，才有知识体系</span></h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">如果只能选择一个方向，你希望在什么方向上做到出类拔萃？&nbsp;<br>对这个问题的思考，会帮助你找到自己的方向，进而有效地去学习知识。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">构建个人知识体系的第一步是定位</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">知识体系和我们的个人目标与关注点有关，你的取舍决定了你的关注点。每个人都需要根据自己的目标和关注点来建立自己的知识体系。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">简单的说，比如你想成为像Linux内核创建者Linus Torvalds那样的人，在Linux操作系统方面做出卓越的贡献，那你就能迅速定位你的知识系统的大方向——<a href="http://lib.csdn.net/base/linux" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Linux操作系统开发</a>。&nbsp;<br>比如你想成为像秋叶大叔（秋叶PPT）那样的人……&nbsp;<br>比如你想成为像马云那样的企业家……</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">这个探索过程可能很慢，需要几个月或者几年，也可能只要一个瞬间。无论长短，最重要的是，你必须有想象力，愿意成为自己这艘即将远航的旗舰的舵手。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">推荐几本书有助于你的<span style="font-weight:700;">自我探索</span>：</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=401209962&amp;idx=1&amp;sn=943ad59f92d64b4bf06343d675d6d210&amp;scene=21#wechat_redirect" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">发现你的天赋</a>&nbsp;<br><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=402553691&amp;idx=1&amp;sn=9979cd10dd5057060b3728d09b3577ea&amp;scene=21#wechat_redirect" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">持续的幸福</a>&nbsp;<br><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651479&amp;idx=1&amp;sn=ea4f5915258e9b5b3de71db6d1f627f6&amp;chksm=83a80360b4df8a767d95f165b5be3652146b4e68b1a2d35c3b33fa77e48f1de3e338a9ff3efe&amp;scene=21#wechat_redirect" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">你的生命有什么可能</a>&nbsp;<br><a href="http://mp.weixin.qq.com/s?__biz=MzAxMzUzNzYyNA==&amp;mid=2650651439&amp;idx=1&amp;sn=ca2a3f8addba935bd7ff158f7f4427ca&amp;chksm=83a80318b4df8a0e48decd8742a1c105446d23138d16dd1574f13aa5bec6ccc0f75a3e9668dc&amp;scene=21#wechat_redirect" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">精进：如何成为一个很厉害的人</a></p><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t1"></a><span style="font-weight:700;">知识的内化</span></h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">一个人的能力分三个层次：</p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li><span style="font-weight:700;">资源</span>：比如知识、技能、经验、精力、人脉等。</li><li><span style="font-weight:700;">应用流程</span>，即使用资源解决问题的能力：做事的方法、流程、策略等，整合应用资源创造价值的能力。</li><li><span style="font-weight:700;">价值取向</span>，即你觉得什么事情重要，什么事情不重要。</li></ul><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">知识是一种资源，是固化的，必须经过你的应用流程，才能<span style="font-weight:700;">内化为自己的经验</span>，帮助你解决工作与生活中的问题，为你创造价值。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">只有知识，没有内化，那结果不堪一击。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">像神仙姐姐王语嫣，牢记每一种武林秘籍，但是一招也打不出来，与人对战只有被秒杀的份儿。&nbsp;<br>像《围城》里的方鸿渐，也学习了很多乱七八糟的知识，但赵辛楣评价他说：“你是个好人，但一无是处”，这也是因为他涉猎很多都不能落地应用创造价值。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">我见过一些软件开发者，说起编程语言里的某个知识点，哪哪儿都清楚，但让他写程序，就是一团麻乱，根本想不起来要用什么，要到处问，List怎么用，StringBuilder怎么用，ListView该怎么用，问半天也还是不会用……</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">所以我们一定要把<span style="font-weight:700;">显性的知识内化为自己的隐性知识</span>，变成自己的能力。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">学习现状</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">很多知识都经由前人的总结显性化了，固化在书本、网络、视频等载体上，我们就从这些载体上开始学习。这是第一步，它让我们知道有这样一个知识、这个知识是什么、这个知识可以用来解决什么问题。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">不要停，你到了这一步千万不要停，要接着去琢磨：</p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>这个知识对我有什么用？</li><li>我过往的工作与生活中，哪些经历、经验可以和这个知识关联起来？</li><li>在将来，这个知识能怎样帮助我改善自己的工作？</li></ul><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">很多人看书、看视频、听演讲，根本不琢磨，只是被动接收，只是“浏览”到有这么个东西，“哦”一声就过去了。所以，他们很难有进一步的收获。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">很多人过度依赖搜索引擎，比如ListView不会用，Google一下，拷贝粘贴一段代码来解决自己的问题。但是解决之后往往就放下了，不再琢磨这段代码为什么能解决问题、我为什么没想到、下次我怎样才能自己来解决问题，这样做的后果就是，遇到问题永远在问搜索引擎，永远也培养不出独立思考并解决问题的能力。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">如何内化</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">如果你能够把自己应用知识解决问题的过程，收获的经验，再转化出来，分享给别人，帮助别人解决问题，那你对知识的掌握将更进一步。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">这也是CSDN上很多博主的做法：用输出倒逼输入。也是我的做法，我的公众号“程序视界”（id：programmer_sight）每周发布三篇原创文章，就是一种倒逼机制，我要逼着自己通过输出的方式来内化知识。现在形成习惯，基本上没什么压力了。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">输出是内化知识的最有效的途径当你准备输出时，会考虑很多很多，比你自己使用知识时考虑的要多很多，比如怎样讲明白、比如怎样让结构清晰、比如怎样设计示例辅助说明、比如这个知识点与哪些关联、比如哪些关联的知识点必须讲清楚……所有这些，会让你进一步思考知识，会让你系统化你的知识，最终会加深你对知识的理解与应用。</p><hr style="border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-top-style:solid;border-top-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t2"></a><span style="font-weight:700;">同主题扩散</span></h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">很少有知识是孤立的，也很少有哪个方向只需要一种知识就可以真正解决问题。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">比如你做桌面客户端产品开发，选择<a href="http://lib.csdn.net/base/cplusplus" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank"><span style="font-weight:700;">C++</span>语言</a>作为主要开发语言，但C++语言本身绝对完成不了这个任务，你必须在同一个主题内寻找其他的支撑，比如Qt，比如MFC，比如wxWidgets。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">这正是我们构建知识体系必须要经历的过程：<span style="font-weight:700;">在同一主题不断挖掘相关知识，完善你的知识图谱。</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">比如我曾画过一张<span style="font-weight:700;"><a href="http://lib.csdn.net/my/chart/C++%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">学习C++的图谱</a></span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><img src="https://img-blog.csdn.net/20170105192730178?" alt="这里写图片描述" title="" style="border:0px;vertical-align:middle;display:table;"></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">从图上就可以看出来，C++是知识的中心，围绕着它有很多相关联的知识。那么，怎么发现同一主题内还有哪些知识需要学习呢？比如学习C++，多问问下面的问题会有帮助：</p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>为了解决A问题，除了这个知识，还需要哪些知识、工具？</li><li>这个知识是由什么知识发展来的，什么新的发展？</li><li>关于这个知识，有哪些书和资料？</li><li>在这个领域，有哪些大咖，他们在学什么？</li><li>关于这个知识，还有哪些是我不知道的？ 查看C++知识库</li></ul><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">如果你能不断思考这些问题，就能不断找到需要进一步学习的知识，就能不断扩大自己的学习区，最终就能不断地丰富自己的知识体系。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">好啦，到现在为止，我们介绍了构建个人知识体系的三个基本的步骤：确立方向，内化和同主题扩散。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">接下来我们介绍让我们的<span style="font-weight:700;"><a href="http://lib.csdn.net/home" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">知识库</a></span>持续发展永葆青春的两个步骤：记录与迭代。</p><hr style="border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-top-style:solid;border-top-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t3"></a>使用工具固化你的知识库</h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">大脑容量有限，必须借助工具将我们的知识系统记录下来。有非常多的工具可以使用，比如：</p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>笔记类软件</li><li><a href="http://blog.csdn.net/" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank"><span style="font-weight:700;">博客</span></a></li><li><a href="https://en.wikipedia.org/wiki/Wiki" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank"><span style="font-weight:700;">wiki</span></a></li><li><a href="http://lib.csdn.net/home" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">各种知识库系统，<span style="font-weight:700;">CSDN知识库</span></a></li><li>图书，电子书&nbsp;<br>……</li></ul><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">在上面这些工具中，其实图书更多时候是你系统化自己知识的一种产出物，比如我在CSDN博客发布的文章多了，就结集出版了几本书：《Qt Quick核心编程》、《你好哇，程序员》。电子书也是类似的。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">在选择工具系统时，遵循下面的原则：</p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>易用，多终端同步</li><li>便于检索</li><li>能呈现知识系统的结构</li></ul><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">每个人都可能使用不同的工具来固化自己的知识库，不必追求与别人一致，我目前使用有道云笔记、<a href="http://blog.csdn.net/foruok/article/details/54014938" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">CSDN博客</a>、<a href="http://lib.csdn.net/home" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">CSDN知识库</a>、脑图、图书等工具来记录知识。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">脑图工具我用的是XMind的社区版，这是我学习Qt时绘制的：</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><img src="https://img-blog.csdn.net/20160503062348496" alt="这里写图片描述" title="" style="border:0px;vertical-align:middle;display:table;"></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">脑图的好处是你可以很方便的记录、分支、补充，也能很好体现知识的关联。但它不方便的地方在于，你往往只能记录一些关键词，大量的知识或者系统化的文章不太方便体现。</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">那后者，可以使用CSDN博客与<a href="http://lib.csdn.net/home" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">CSDN知识库</a>的组合来完成。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">我就在CSDN博客上发表文章，分享我对某方面知识的见解，然后使用<span style="font-weight:700;">CSDN知识库把这些文章链接起来，整合成一个系统。</span>这种方式的好处显而易见：方便，多终端同步，系统化，利于更新迭代。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">个人图谱样例</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><img src="https://img-blog.csdn.net/20170106162828798?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYmFpeXV6aG9uZzIwMTI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="图片描述" title="" style="border:0px;vertical-align:middle;display:table;"></p><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>@code_xzh 的<span style="font-weight:700;"><a href="http://lib.csdn.net/xiangzhihong8/chart/React%20Native" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">React Native图谱</a></span></li><li>@刘玉刚 的<span style="font-weight:700;"><a href="http://lib.csdn.net/BaiHuaXiu123/chart/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8B%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9B%BE%E8%B0%B1%E4%B8%AD%E7%BA%A7" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">人工智能中级图谱</a></span></li><li>@张智超 的&nbsp;<span style="font-weight:700;"><a href="http://lib.csdn.net/qq_28832135/chart/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">微信开发，小程序图谱</a></span></li></ul><hr style="border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-top-style:solid;border-top-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><ul style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><li>CSDN官网之<a href="http://lib.csdn.net/base/reactnative/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank"><span style="font-weight:700;">React Native</span></a></li><li>CSDN官网之<a href="http://lib.csdn.net/base/ai/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank"><span style="font-weight:700;">人工智能</span></a></li><li>CSDN官网<span style="font-weight:700;"><a href="http://lib.csdn.net/base/wechat/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">微信开发</a></span></li></ul><hr style="border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-top-style:solid;border-top-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t4"></a><span style="font-weight:700;">迭代与更新</span></h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">当我们将自己某方面知识构建成库、系统化之后，记录在某个载体上，接下来面临的就是知识的更新。</span></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">每一种知识都可能会不断发展、更新，都可能随着时代的发展而变得过时，所以我们要不断更新自己的知识体系。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">比如你原来在<span style="font-weight:700;"><a href="http://lib.csdn.net/base/cplusplus" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">C++</a></span>方便积累了一些知识，使用的是C++98的标准，但现在C++11在普及，C++17马上出来，你就需要更新。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">如果我们不能定期更新自己的知识库，那我们就会慢慢落后于时代，越来越没有价值，也会失去很多机会。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">举个简单的例子，学Java的朋友们，当2007年Google发布Android系统时，有多少人抓住机会，把Android开发框架纳入到了自己的知识体系中？如果你那时开始做Android，就赶上了移动开发的大潮，现在不是大神也是大咖。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;">查看<a href="http://lib.csdn.net/base/java/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Java知识体系</a>&gt;&gt;&gt;</span>&nbsp;<span style="font-weight:700;"><a href="http://lib.csdn.net/base/javase/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Java SE图谱</a>，<a href="http://lib.csdn.net/base/javaee/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Java EE图谱</a></span>&nbsp;<br><span style="font-weight:700;">查看<a href="http://lib.csdn.net/base/android/structure" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Android知识体系</a>&gt;&gt;&gt;</span></p><hr style="border-right-width:0px;border-bottom-width:0px;border-left-width:0px;border-top-style:solid;border-top-color:rgb(238,238,238);color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><h2 style="font-family:'microsoft yahei', arial;font-weight:500;line-height:1.1;color:rgb(51,51,51);font-size:30px;text-align:justify;"><a name="t5"></a><span style="font-weight:700;">四象共赢</span></h2><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">前面我们讲了构建某个领域知识库的过程，那其实呢，一个人可能会在很多领域建立自己的知识体系，因为我们的生活本来就是多元中心的。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">一个平衡的人生包含四个象限：事业、家庭、社区、身心与精神。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">我们应当在每个象限中都确立一些关键目标，为这些关键目标配置资源（时间、精力、金钱、人脉等），在每个象限中建立自己的知识图谱。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">比如你是软件开发工程师，在事业领域，你构建软件开发相关的知识图谱，你还有家庭，可能会围绕夫妻、两性、婚姻、育儿、情感管理、亲密关系等构建出面向家庭的知识体系。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">再进一步，不同象限的知识，其实是可以交叉融合的。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">我们以软件开发中的<span style="font-weight:700;"><a href="http://lib.csdn.net/node/696" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Scrum</a></span>为例，来说明不同领域的知识体系如何相互融合。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">使用<span style="font-weight:700;"><a href="http://lib.csdn.net/search/Scrum" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">Scrum模型</a></span>来辅助产品开发时，先会抽象出一个Product Backlog（PB，产品需求列表），然后会从PB中挑选一部分需求，纳入到一个Sprint（冲刺，一般是为期2~4周的迭代）中来实现，每个Sprint有启动会议（主要选择要实现的需求或Story）、每日站会、任务看板、燃尽图、演示会议、回顾会议等方法来保证Sprint的顺利进行。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">这里面的流程简化下来就是：确定大的目标–&gt;拆分出阶段性小目标–&gt;可视化进度，用站会、燃尽图等反馈促进行动–&gt;回顾总结。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">某一个具体的方法，也可以运用到别的领域。以Scrum的站会为例，就可用于每一天的生活，无论是家庭还是工作。以我为例，每天早上我都会想今天要做什么事情，每天晚上会想今天完成了什么、什么没完成、遇见了什么问题、明天做什么，这种习惯就来自Scrum的站会，能极大提高你每一天的生活质量。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">当我们经常思考一个领域的知识怎样才能应用到另一个领域时，我们就开始了融合、创新的过程，进入了更高境界。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">如果你不断地找到了交叉地带，融合了各个领域的知识，那最终，你就可能将你所有的知识体系打通，统合出独属于你自己的和谐完整的知识图谱，帮助你实现平衡和谐。</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><img src="https://img-blog.csdn.net/20170105192022988?" alt="这里写图片描述" title="" style="border:0px;vertical-align:middle;display:table;"></p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;">从知识管理的角度看，单纯地讲学习已经不够。学习只是个人知识处理的一个环节，你还必须学会保存，共享和创新知识。构建知识体系并不断更新，这是保持核心竞争优势的良方——张斌教授，中国人民大学信息资源管理学院副院长</p><p style="color:rgb(51,51,51);font-family:'microsoft yahei', arial;font-size:16px;line-height:27.2px;text-align:justify;"><span style="font-weight:700;"><a href="http://lib.csdn.net/home" rel="nofollow" style="color:rgb(51,122,183);text-decoration:none;background-color:transparent;" target="_blank">CSDN知识库</a></span>提供了50+知识系统图谱和10000+资源内容&nbsp;<br>开发者可获得官网图谱，可自行生成图谱和知识库，提升技术知识管理的能力</p>            </div><br>                </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix csdn-tracking-statistics&quot; data-pid=&quot;blog&quot; data-mod=&quot;popu_307&quot; data-dsm=&quot;post&quot;&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="学习规划/方法" scheme="images/avatar.gif/categories/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92-%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Plan" scheme="images/avatar.gif/tags/Plan/"/>
    
      <category term="Skill" scheme="images/avatar.gif/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>s3c2440之UART学习笔记</title>
    <link href="images/avatar.gif/2019/02/06/s3c2440%E4%B9%8BUART%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>images/avatar.gif/2019/02/06/s3c2440之UART学习笔记/</id>
    <published>2019-02-06T11:46:30.000Z</published>
    <updated>2019-02-07T07:38:58.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p>UART（Universal Asynchronous Receiver/Transmitter，通用异步接收/发送装置）用于异步通信，可以实现全双工发送和接收。它不仅可以实现不同嵌入式系统之间的通信，还可以实现与PC之间的通信。数据传输流程如下：</p><ul><li><p>平时数据线处于空闲状态（1状态）；</p></li><li><p>当要发送数据时,UART改变TxD数据线的状态（变为0状态）并维持1位的时间，这样接收方检测到开始位后，在等待1.5位的时间就开始一位一位地检测数据线的状态得到所传输的数据；</p></li><li><p>UART一帧中可以有5、6、7或8位的数据，发送方一位一位地改变数据线的状态将他们发送出去，首先发送最低位；</p></li><li><p>如果使用校验功能，UART在发送完数据后，还要发送1位校验位。有两种校验方法：奇校验、偶校验——数据位连同校验位中，1的数据等于奇数或偶数；</p></li><li><p>最后，发送停止位，数据线恢复到空闲状态（1状态）。停止位的长度有3种：1位、1.5位、2位。</p></li></ul><p>下图演示了UART使用7个数据位、偶校验、2个停止位的格式传输字符‘A’（二进制值为0b1000001）时，TTL/COM逻辑电平对应的波形。</p><img src="/2019/02/06/s3c2440之UART学习笔记/1.jpg" title="UART逻辑电平波形"><p>s3c2440提供了三个UART端口，它们都可以通过查询、中断和DMA方式传输数据，而且每个UART都分别有一个64个字节的接收FIFO和一个64个字节的发送FIFO。如下图所示：每个UART包含一个波特率发生器、发送器、接收器和一个控制单元。波特率发生器可以由PCLK、FCLK/n或UEXTCLK（外部输入时钟）时钟驱动。UART通过使用系统时钟可以支持最高115.2Kbps的比特率。如果是使用外部器件提供UEXTCLK的UART,则UART可以运行在更高的速度。发送器和接收器各包含一个64字节的FIFO和数据移位器。要发送数据时，先将数据写入到FIFO接着在发送前复制到发送移位器中，随后将数据从发送数据引脚(TXDn)移出；接收数据时，从接收数据引脚(RXDn)移入接收移位器，接着从移位器复制到FIFO。</p><img src="/2019/02/06/s3c2440之UART学习笔记/2.png"><h2 id="寄存器配置"><a href="#寄存器配置" class="headerlink" title="寄存器配置"></a>寄存器配置</h2><ul><li><h4 id="配置串口引脚（GPHCON）及内部上拉（GPHUP）"><a href="#配置串口引脚（GPHCON）及内部上拉（GPHUP）" class="headerlink" title="配置串口引脚（GPHCON）及内部上拉（GPHUP）"></a><strong>配置串口引脚（GPHCON）及内部上拉（GPHUP）</strong></h4></li></ul><p>注：在串口开始前的空闲状态处于高电平，开始位为低电平，需要进行内部上拉保证空闲状态为高电平</p><img src="/2019/02/06/s3c2440之UART学习笔记/3.png"><ul><li><h4 id="设置波特率及选择时钟源"><a href="#设置波特率及选择时钟源" class="headerlink" title="设置波特率及选择时钟源"></a><strong>设置波特率及选择时钟源</strong></h4><img src="/2019/02/06/s3c2440之UART学习笔记/4.png"><img src="/2019/02/06/s3c2440之UART学习笔记/5.png"><img src="/2019/02/06/s3c2440之UART学习笔记/6.png"></li><li><h4 id="设置数据格式"><a href="#设置数据格式" class="headerlink" title="设置数据格式"></a><strong>设置数据格式</strong></h4><img src="/2019/02/06/s3c2440之UART学习笔记/7.png"></li></ul><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><h4 id="uart-h"><a href="#uart-h" class="headerlink" title="uart.h"></a><strong>uart.h</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">​</span><br><span class="line">1 #ifndef     _UART_H                // 如果某个文件第一次包含这个头文件，_UART_H这个宏没有定义时</span><br><span class="line">2 #define     _UART_H                // 定义_UART_H这个宏</span><br><span class="line">3 </span><br><span class="line">4 void uart0_init(void);</span><br><span class="line">5 int putchar(int c);</span><br><span class="line">6 int getchar(void);</span><br><span class="line">7 int puts(const char *s);</span><br><span class="line">8 </span><br><span class="line">9 #endif</span><br><span class="line">​</span><br></pre></td></tr></table></figure><h4 id="uart-c"><a href="#uart-c" class="headerlink" title="uart.c"></a><strong>uart.c</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">​</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"s3c2440_soc.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 115200,8n1 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">uart0_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* 设置引脚用于串口 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* GPH2,3用于TxD0, RxD0 */</span></span><br><span class="line">GPHCON &amp;= ~((<span class="number">3</span>&lt;&lt;<span class="number">4</span>) | (<span class="number">3</span>&lt;&lt;<span class="number">6</span>));  <span class="comment">//寄存器4-7位清0</span></span><br><span class="line">GPHCON |= ((<span class="number">2</span>&lt;&lt;<span class="number">4</span>) | (<span class="number">2</span>&lt;&lt;<span class="number">6</span>));   <span class="comment">//4-7位1010，其余位为1</span></span><br><span class="line"></span><br><span class="line">GPHUP &amp;= ~((<span class="number">1</span>&lt;&lt;<span class="number">2</span>) | (<span class="number">1</span>&lt;&lt;<span class="number">3</span>));  <span class="comment">/* 使能内部上拉为高电平，低电平开始位 */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置波特率 */</span></span><br><span class="line"><span class="comment">/* UBRDIVn = (int)( UART clock / ( buad rate x 16) ) –1</span></span><br><span class="line"><span class="comment"> *  UART clock = 50M</span></span><br><span class="line"><span class="comment"> *  UBRDIVn = (int)( 50000000 / ( 115200 x 16) ) –1 = 26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">UCON0 = <span class="number">0x00000005</span>; <span class="comment">/* PCLK,中断/查询模式 */</span></span><br><span class="line">UBRDIV0 = <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置数据格式 */</span></span><br><span class="line">ULCON0 = <span class="number">0x00000003</span>; <span class="comment">/* 8n1: 8个数据位, 无较验位, 1个停止位 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putchar</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* UTRSTAT0 */</span></span><br><span class="line"><span class="comment">/* UTXH0 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!(UTRSTAT0 &amp; (<span class="number">1</span>&lt;&lt;<span class="number">2</span>)));   <span class="comment">//当发送缓冲寄存器和发送移位器不是空的时候，循环等待</span></span><br><span class="line">UTXH0 = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)c;  <span class="comment">//反之，当上一个发送完了，再向发送缓冲寄存器写入字符(这里是按单个字节发送)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getchar</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (!(UTRSTAT0 &amp; (<span class="number">1</span>&lt;&lt;<span class="number">0</span>)));  <span class="comment">//当接收缓冲寄存器是空的时候，循环等待</span></span><br><span class="line"><span class="keyword">return</span> URXH0;                  <span class="comment">//当接收缓冲寄存器非空的时候，返回接收缓冲寄存器得到的值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">puts</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span> (*s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">putchar</span>(*s);</span><br><span class="line">s++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><h4 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a><strong>main.c</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">​</span><br><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"s3c2440_soc.h"</span></span></span><br><span class="line"> <span class="number">2</span> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"uart.h"</span></span></span><br><span class="line"> <span class="number">3</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> 4 </span>&#123;    <span class="keyword">unsigned</span> <span class="keyword">char</span> c;</span><br><span class="line"> <span class="number">5</span>     uart0_init();</span><br><span class="line"> <span class="number">6</span>     <span class="built_in">puts</span>(<span class="string">"Hello,world!\n\r"</span>);</span><br><span class="line"> <span class="number">7</span>     <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line"> <span class="number">8</span>     &#123;</span><br><span class="line"> <span class="number">9</span>         c=getchar();               <span class="comment">// 从PC键盘上得到输入字符(串 )</span></span><br><span class="line"><span class="number">10</span>         <span class="keyword">if</span> (c == <span class="string">'\r'</span>)              <span class="comment">//  换行处理 ，不论输入\n或者\r,都会换行并使光标到行首 </span></span><br><span class="line"><span class="number">11</span>         &#123;</span><br><span class="line"><span class="number">12</span>             <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"><span class="number">13</span>         &#125;</span><br><span class="line"><span class="number">14</span>         <span class="keyword">if</span> (c == <span class="string">'\n'</span>)</span><br><span class="line"><span class="number">15</span>         &#123;</span><br><span class="line"><span class="number">16</span>             <span class="built_in">putchar</span>(<span class="string">'\r'</span>);</span><br><span class="line"><span class="number">17</span>         &#125;</span><br><span class="line"><span class="number">18</span>         <span class="built_in">putchar</span>(c);              <span class="comment">// 输出得到的字符(串 )到PC，PC屏幕会显示串口传过来的字符(串 )</span></span><br><span class="line"><span class="number">19</span>     &#125;    </span><br><span class="line"><span class="number">20</span>     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="number">21</span> &#125;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><h4 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a><strong>makefile</strong></h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">​</span><br><span class="line">all:</span><br><span class="line">    arm-linux-gcc -c -o led.o led.c</span><br><span class="line">    arm-linux-gcc -c -o uart.o uart.c</span><br><span class="line">    arm-linux-gcc -c -o main.o main.c</span><br><span class="line">    arm-linux-gcc -c -o start.o start.S</span><br><span class="line">    arm-linux-ld -Ttext <span class="number">0</span> start.o led.o uart.o main.o -o uart.elf</span><br><span class="line">    arm-linux-objcopy -O binary -S uart.elf uart.bin</span><br><span class="line">    arm-linux-objdump -D uart.elf &gt; uart.dis</span><br><span class="line">clean:</span><br><span class="line">    rm *.bin *.o *.elf *.dis</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原理解析&quot;&gt;&lt;a href=&quot;#原理解析&quot; class=&quot;headerlink&quot; title=&quot;原理解析&quot;&gt;&lt;/a&gt;原理解析&lt;/h2&gt;&lt;p&gt;UART（Universal Asynchronous Receiver/Transmitter，通用异步接收/发送装置）用
      
    
    </summary>
    
      <category term="s3c2440学习笔记" scheme="images/avatar.gif/categories/s3c2440%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="images/avatar.gif/tags/Linux/"/>
    
      <category term="s3c2440" scheme="images/avatar.gif/tags/s3c2440/"/>
    
      <category term="Uart" scheme="images/avatar.gif/tags/Uart/"/>
    
  </entry>
  
  <entry>
    <title>嵌入式Linux驱动学习之引导篇——为什么要选择嵌入式Linux驱动这个方向？</title>
    <link href="images/avatar.gif/2019/02/05/%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%95%E5%AF%BC%E7%AF%87%E2%80%94%E2%80%94%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89%E6%8B%A9%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E8%BF%99%E4%B8%AA%E6%96%B9%E5%90%91%EF%BC%9F/"/>
    <id>images/avatar.gif/2019/02/05/嵌入式Linux驱动学习之引导篇——为什么要选择嵌入式Linux驱动这个方向？/</id>
    <published>2019-02-05T01:37:08.000Z</published>
    <updated>2019-02-07T07:40:37.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介 "></a><strong>简介 </strong></h2><p>酝酿了几分钟，依旧不知道如何开篇（这可能是工科男的一个通病吧）。索性随意起来，想到哪写到哪，这样也许思维能变得更加活跃呢。先交代一下背景，本人目前是国内某普通一本高校的一名大三学生，读的专业是电气工程及其自动化。转程序猿也是目前大多数跨专业就业学生的首选，毕竟薪资福利摆在那里，博主自然也是这股潮流中的一员。我也不知道当初在填报志愿的时候为什么要选择这个专业，可能是觉得这个专业的名字比较高大上吧。虽然在填报志愿的时候有稍微了解过这个专业，但是毕竟没有真正去体验过，所以并没有对这个专业有清醒的认识。电气工程这个专业属于强电（直接理解为高压就好），摆正心态认真学下去能学的好（数学基础要打好）。这个专业虽然是工科里比较注重实践与理论相结合的专业，但由于其专业的特殊性，很难找到实践的机会（场地与设备都不太允许）。每学期基本上都有实验课，但是基本上都是验证性实验，且这些实验室基本都不对学生开放（只能是实验课去摸摸，毕竟设备都挺贵的）。顺其自然，我大一大二基本上都是在搞自动化方向的东西，毕竟成本低，易入门，而且做出来东西后很有成就感（这点最关键），所以基本上就是按照现在大多数大学生一样开始从单片机入门了。转折点是大二暑假，当时参加了全国大学生电子设计大赛，我发现周围的同学都好强，动手能力和学习能力都超乎我的想象，这时候惊呼：原来周围的同学都这么努力呀！莫名感到压力倍增…在长达1个月的集中训练中，我也发现其中存在的一些问题（或者对我来说的疑惑）。</p><h2 id="代码的创造能力不足"><a href="#代码的创造能力不足" class="headerlink" title="代码的创造能力不足"></a><strong>代码的创造能力不足</strong></h2><p>虽然周围同学都有很强的自学和动手能力（比如调通一个四轴小飞行器或者倒立摆），但是真正需要自己创造的代码并不多，基本上就是搬运其他人的代码。这样能够快速实现作品的功能，但是也存在一些隐患。例如：对MCU各种接口的运行机制并不是很清楚，而STM32的库函数的广泛使用更是加深了这种隐患。万丈高楼平地起，没有打好地基外表再华丽也只是危楼。而且很多大公司在招应届毕业生时也更注重基础知识的考核。</p><h2 id="过于浮躁"><a href="#过于浮躁" class="headerlink" title="过于浮躁"></a><strong>过于浮躁</strong></h2><p>这也是现代人的一个通病，基本上搬来的代码能用就行，也不去考虑是否能够进一步去优化，没有进行深入思考和实时总结。这样以后在遇到相同的问题时又需要重新来过，其实是最没有效率的做法。</p><h2 id="同质化严重"><a href="#同质化严重" class="headerlink" title="同质化严重"></a><strong>同质化严重</strong></h2><p>这里说的同质化并不是作品的同质化（作品虽然有时也类似…），而是能力的同质化。感觉具备这方面能力的人实在太多，谁没有在大学的时候玩过几年单片机？名校学生的能力会比你差？找工作在招聘网上这些单片机开发的职位的薪资也比较低，因为太多人会了，能力相当的情况下公司肯定选择省钱的方案咯。</p><p>以上就是我大学期间的一些思想变化，它也逐渐让我清醒的认识自己，我想转嵌入式Linux驱动开发的决心俞加强烈。因为这些问题能够在嵌入式Linux驱动开发的学习过程中迎刃而解，毕竟环环相扣，若囫囵吞枣则寸步难行。啰嗦了这么久，终于要转入正题了。语言功底太差，各位请见谅（手动捂脸）。。。</p><p>有人说嵌入式是一个坑，是一个无底洞。其实他们说的也没错，因为嵌入式涉及的知识太广泛了，需要花很多的时间去学习一些新的东西，而且还不一定能够立刻有成效，这也让很多想踏入嵌入式大门的初学者停下了脚步。然而，嵌入式的门槛固然较高，但是若学有所成，得到的薪资和发展空间也是纯单片机开发所不能及的。那来说说我为什么要选择嵌入式Linux驱动这个方向吧。</p><h2 id="​具备一定理论与实践基础"><a href="#​具备一定理论与实践基础" class="headerlink" title="​具备一定理论与实践基础"></a>​<strong>具备一定理论与实践基础</strong></h2><p>我们的选择是会受环境因素影响的，本身专业就是电类专业，自然对硬件知识的接受能力比较强，加之在大学期间也经常捣鼓单片机，对各种硬件接口的基本原理还是比较熟悉的。相对于零基础的初学者，我们依然有一些明显的优势。</p><h2 id="​驱动方向的人才相对紧缺"><a href="#​驱动方向的人才相对紧缺" class="headerlink" title="​驱动方向的人才相对紧缺"></a>​<strong>驱动方向的人才相对紧缺</strong></h2><p>比起纯IT方向的程序猿，往嵌入式Linux驱动开发方向走的人就少很多了，这也导致驱动方向的人才相对紧缺。当然这其中也与开发难度大、学习周期长、涉及范围广、成本高等因素有关。这也就形成了待遇较高的局面。况且最近发生的“美国限制向中兴出口芯片案”迫使我国加快芯片的自主研发，虽然芯片的研发还任重而道远，但已经是基本趋势，到那时嵌入式驱动工程师需求就更加大了。</p><h2 id="​发展空间比较大和选择多"><a href="#​发展空间比较大和选择多" class="headerlink" title="​发展空间比较大和选择多"></a>​<strong>发展空间比较大和选择多</strong></h2><p>嵌入式产品多种多样，复杂多变，感觉只要与智能电子相关的产品都能叫嵌入式产品，这也就在一定程度上拓宽了嵌入式驱动方向的发展空间。同时，选择也变得相对较多。可以和志同道合的朋友一起创业，或者进入公司工作，总而言之，自己能力越强选择越多。同时，若想转IT上层业务软件方向相对比较容易，至少比上层业务转驱动方向容易很多。</p><h2 id="​整体架构稳定"><a href="#​整体架构稳定" class="headerlink" title="​整体架构稳定"></a>​<strong>整体架构稳定</strong></h2><p>嵌入式驱动方向虽然入门难，但是整体架构比较稳定，并不会像IT上层软件一样需要根据客户需求不断更改自己的实施方案甚至完全推翻，可能就有更多的时间来提升自己的技术能力。</p><p>接下来我还会分享一些自己学习嵌入式Linux驱动方向的学习笔记和心得体会，尽请期待。。。由于本人也是初学者，也有很多知识需要补充，可能有哪里说的不对望各位大佬指教，共同进步！! !写博客的初衷是想自己巩固一下所学知识，并且做一些知识输出分享给大家，何乐而不为呢！</p><p>很喜欢下面的一段话：</p><blockquote><p>​    “对于优秀的程序员，其最优秀的品质是能够心平气和地学习与思考问题，透析代码背后的架构、原理和设计思想。没有思想的代码是垃圾代码，没有思想的程序员，只是在完成低水平重复建设的体力活。很多程序员从不过问自己写的代码最后在机器里面是怎么跑的，很多事情莫名其妙地发生了，很多bug莫名其妙地消失了……他们永远都在得过且过。”</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介 &quot;&gt;&lt;/a&gt;&lt;strong&gt;简介 &lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;酝酿了几分钟，依旧不知道如何开篇（这可能是工科男的一个通病吧）。索性随意起来，想到哪写到哪，这样也许思
      
    
    </summary>
    
      <category term="学习规划/方法" scheme="images/avatar.gif/categories/%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92-%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Linux" scheme="images/avatar.gif/tags/Linux/"/>
    
      <category term="Plan" scheme="images/avatar.gif/tags/Plan/"/>
    
  </entry>
  
  <entry>
    <title>s3c2440之内存控制器与SDRAM学习笔记</title>
    <link href="images/avatar.gif/2019/02/05/s3c2440%E4%B9%8B%E5%86%85%E5%AD%98%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8ESDRAM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>images/avatar.gif/2019/02/05/s3c2440之内存控制器与SDRAM学习笔记/</id>
    <published>2019-02-04T16:19:51.000Z</published>
    <updated>2019-02-07T07:39:20.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="不同位宽设备的连接"><a href="#不同位宽设备的连接" class="headerlink" title="不同位宽设备的连接"></a><strong>不同位宽设备的连接</strong></h2><img src="/2019/02/05/s3c2440之内存控制器与SDRAM学习笔记/1.png" title="不同位宽设备与CPU的连接示意图"><p>上图连接方式是不同位宽设备与CPU的连接示意图，例如，CPU发出寻找第3字节的地址…0011,8位ROM接收到的是…0011（从内部结构可以看出是第4个字节）；16位ROM接收到的是…0001（从内部结构可以看出是第2个字节的部分）；32位ROM接收到的是…0000（从内部结构可以看出是第1个字节的部分）。这种连接方式能保证在连接不同位宽的ROM时能够找到对应的位置。16位或更高位ROM字节的具体位置还需要内存控制器近一步寻找。</p><h2 id="Nor-Flash"><a href="#Nor-Flash" class="headerlink" title="Nor Flash"></a><strong>Nor Flash</strong></h2><p>Nor Flash的空间0x00000000 ~0x06000000，为128M（即每一个片选信号可以选择的空间是128M=2^27），也就需要A0、A1……A26，共27根地址线。CPU发出的32位地址线，内存控制器根据地址范围，片选上相应的bank，并将地址转化为27位。</p><p>当选择Nor Flash启动时，CPU发出的指令的地址范围处于0x0000000 - 0x06000000，内存控制器就会使nGCS0处于低电平（片选引脚被选中），Nor Flash被选中。内存控制器根据不同的地址地址范围，发出不同的片选引脚，只有被片选引脚选中的芯片才能正常工作，不被选中的芯片就像不存在一样。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;不同位宽设备的连接&quot;&gt;&lt;a href=&quot;#不同位宽设备的连接&quot; class=&quot;headerlink&quot; title=&quot;不同位宽设备的连接&quot;&gt;&lt;/a&gt;&lt;strong&gt;不同位宽设备的连接&lt;/strong&gt;&lt;/h2&gt;&lt;img src=&quot;/2019/02/05/s3c244
      
    
    </summary>
    
      <category term="s3c2440学习笔记" scheme="images/avatar.gif/categories/s3c2440%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="images/avatar.gif/tags/Linux/"/>
    
      <category term="s3c2440" scheme="images/avatar.gif/tags/s3c2440/"/>
    
      <category term="NorFlash" scheme="images/avatar.gif/tags/NorFlash/"/>
    
  </entry>
  
</feed>
