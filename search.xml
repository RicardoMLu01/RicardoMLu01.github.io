<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[s3c2440之UART学习笔记]]></title>
    <url>%2F2019%2F02%2F06%2Fs3c2440%E4%B9%8BUART%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[原理解析UART（Universal Asynchronous Receiver/Transmitter，通用异步接收/发送装置）用于异步通信，可以实现全双工发送和接收。它不仅可以实现不同嵌入式系统之间的通信，还可以实现与PC之间的通信。数据传输流程如下： 平时数据线处于空闲状态（1状态）； 当要发送数据时,UART改变TxD数据线的状态（变为0状态）并维持1位的时间，这样接收方检测到开始位后，在等待1.5位的时间就开始一位一位地检测数据线的状态得到所传输的数据； UART一帧中可以有5、6、7或8位的数据，发送方一位一位地改变数据线的状态将他们发送出去，首先发送最低位； 如果使用校验功能，UART在发送完数据后，还要发送1位校验位。有两种校验方法：奇校验、偶校验——数据位连同校验位中，1的数据等于奇数或偶数； 最后，发送停止位，数据线恢复到空闲状态（1状态）。停止位的长度有3种：1位、1.5位、2位。 下图演示了UART使用7个数据位、偶校验、2个停止位的格式传输字符‘A’（二进制值为0b1000001）时，TTL/COM逻辑电平对应的波形。]]></content>
      <categories>
        <category>里尼克斯</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>s3c2440</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[嵌入式Linux驱动学习之引导篇——为什么要选择嵌入式Linux驱动这个方向？]]></title>
    <url>%2F2019%2F02%2F05%2F%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%BC%95%E5%AF%BC%E7%AF%87%E2%80%94%E2%80%94%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%80%89%E6%8B%A9%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E9%A9%B1%E5%8A%A8%E8%BF%99%E4%B8%AA%E6%96%B9%E5%90%91%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[简介 酝酿了几分钟，依旧不知道如何开篇（这可能是工科男的一个通病吧）。索性随意起来，想到哪写到哪，这样也许思维能变得更加活跃呢。先交代一下背景，本人目前是国内某普通一本高校的一名大三学生，读的专业是电气工程及其自动化。转程序猿也是目前大多数跨专业就业学生的首选，毕竟薪资福利摆在那里，博主自然也是这股潮流中的一员。我也不知道当初在填报志愿的时候为什么要选择这个专业，可能是觉得这个专业的名字比较高大上吧。虽然在填报志愿的时候有稍微了解过这个专业，但是毕竟没有真正去体验过，所以并没有对这个专业有清醒的认识。电气工程这个专业属于强电（直接理解为高压就好），摆正心态认真学下去能学的好（数学基础要打好）。这个专业虽然是工科里比较注重实践与理论相结合的专业，但由于其专业的特殊性，很难找到实践的机会（场地与设备都不太允许）。每学期基本上都有实验课，但是基本上都是验证性实验，且这些实验室基本都不对学生开放（只能是实验课去摸摸，毕竟设备都挺贵的）。顺其自然，我大一大二基本上都是在搞自动化方向的东西，毕竟成本低，易入门，而且做出来东西后很有成就感（这点最关键），所以基本上就是按照现在大多数大学生一样开始从单片机入门了。转折点是大二暑假，当时参加了全国大学生电子设计大赛，我发现周围的同学都好强，动手能力和学习能力都超乎我的想象，这时候惊呼：原来周围的同学都这么努力呀！莫名感到压力倍增…在长达1个月的集中训练中，我也发现其中存在的一些问题（或者对我来说的疑惑）。 代码的创造能力不足虽然周围同学都有很强的自学和动手能力（比如调通一个四轴小飞行器或者倒立摆），但是真正需要自己创造的代码并不多，基本上就是搬运其他人的代码。这样能够快速实现作品的功能，但是也存在一些隐患。例如：对MCU各种接口的运行机制并不是很清楚，而STM32的库函数的广泛使用更是加深了这种隐患。万丈高楼平地起，没有打好地基外表再华丽也只是危楼。而且很多大公司在招应届毕业生时也更注重基础知识的考核。 过于浮躁这也是现代人的一个通病，基本上搬来的代码能用就行，也不去考虑是否能够进一步去优化，没有进行深入思考和实时总结。这样以后在遇到相同的问题时又需要重新来过，其实是最没有效率的做法。 同质化严重这里说的同质化并不是作品的同质化（作品虽然有时也类似…），而是能力的同质化。感觉具备这方面能力的人实在太多，谁没有在大学的时候玩过几年单片机？名校学生的能力会比你差？找工作在招聘网上这些单片机开发的职位的薪资也比较低，因为太多人会了，能力相当的情况下公司肯定选择省钱的方案咯。 以上就是我大学期间的一些思想变化，它也逐渐让我清醒的认识自己，我想转嵌入式Linux驱动开发的决心俞加强烈。因为这些问题能够在嵌入式Linux驱动开发的学习过程中迎刃而解，毕竟环环相扣，若囫囵吞枣则寸步难行。啰嗦了这么久，终于要转入正题了。语言功底太差，各位请见谅（手动捂脸）。。。 有人说嵌入式是一个坑，是一个无底洞。其实他们说的也没错，因为嵌入式涉及的知识太广泛了，需要花很多的时间去学习一些新的东西，而且还不一定能够立刻有成效，这也让很多想踏入嵌入式大门的初学者停下了脚步。然而，嵌入式的门槛固然较高，但是若学有所成，得到的薪资和发展空间也是纯单片机开发所不能及的。那来说说我为什么要选择嵌入式Linux驱动这个方向吧。 ​具备一定理论与实践基础我们的选择是会受环境因素影响的，本身专业就是电类专业，自然对硬件知识的接受能力比较强，加之在大学期间也经常捣鼓单片机，对各种硬件接口的基本原理还是比较熟悉的。相对于零基础的初学者，我们依然有一些明显的优势。 ​驱动方向的人才相对紧缺比起纯IT方向的程序猿，往嵌入式Linux驱动开发方向走的人就少很多了，这也导致驱动方向的人才相对紧缺。当然这其中也与开发难度大、学习周期长、涉及范围广、成本高等因素有关。这也就形成了待遇较高的局面。况且最近发生的“美国限制向中兴出口芯片案”迫使我国加快芯片的自主研发，虽然芯片的研发还任重而道远，但已经是基本趋势，到那时嵌入式驱动工程师需求就更加大了。 ​发展空间比较大和选择多嵌入式产品多种多样，复杂多变，感觉只要与智能电子相关的产品都能叫嵌入式产品，这也就在一定程度上拓宽了嵌入式驱动方向的发展空间。同时，选择也变得相对较多。可以和志同道合的朋友一起创业，或者进入公司工作，总而言之，自己能力越强选择越多。同时，若想转IT上层业务软件方向相对比较容易，至少比上层业务转驱动方向容易很多。 ​整体架构稳定嵌入式驱动方向虽然入门难，但是整体架构比较稳定，并不会像IT上层软件一样需要根据客户需求不断更改自己的实施方案甚至完全推翻，可能就有更多的时间来提升自己的技术能力。 接下来我还会分享一些自己学习嵌入式Linux驱动方向的学习笔记和心得体会，尽请期待。。。由于本人也是初学者，也有很多知识需要补充，可能有哪里说的不对望各位大佬指教，共同进步！! !写博客的初衷是想自己巩固一下所学知识，并且做一些知识输出分享给大家，何乐而不为呢！ 很喜欢下面的一段话： ​ “对于优秀的程序员，其最优秀的品质是能够心平气和地学习与思考问题，透析代码背后的架构、原理和设计思想。没有思想的代码是垃圾代码，没有思想的程序员，只是在完成低水平重复建设的体力活。很多程序员从不过问自己写的代码最后在机器里面是怎么跑的，很多事情莫名其妙地发生了，很多bug莫名其妙地消失了……他们永远都在得过且过。”]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[s3c2440之内存控制器与SDRAM学习笔记]]></title>
    <url>%2F2019%2F02%2F05%2Fs3c2440%E4%B9%8B%E5%86%85%E5%AD%98%E6%8E%A7%E5%88%B6%E5%99%A8%E4%B8%8ESDRAM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[不同位宽设备的连接上图连接方式是不同位宽设备与CPU的连接示意图，例如，CPU发出寻找第3字节的地址…0011,8位ROM接收到的是…0011（从内部结构可以看出是第4个字节）；16位ROM接收到的是…0001（从内部结构可以看出是第2个字节的部分）；32位ROM接收到的是…0000（从内部结构可以看出是第1个字节的部分）。这种连接方式能保证在连接不同位宽的ROM时能够找到对应的位置。16位或更高位ROM字节的具体位置还需要内存控制器近一步寻找。 Nor FlashNor Flash的空间0x00000000 ~0x06000000，为128M（即每一个片选信号可以选择的空间是128M=2^27），也就需要A0、A1……A26，共27根地址线。CPU发出的32位地址线，内存控制器根据地址范围，片选上相应的bank，并将地址转化为27位。 当选择Nor Flash启动时，CPU发出的指令的地址范围处于0x0000000 - 0x06000000，内存控制器就会使nGCS0处于低电平（片选引脚被选中），Nor Flash被选中。内存控制器根据不同的地址地址范围，发出不同的片选引脚，只有被片选引脚选中的芯片才能正常工作，不被选中的芯片就像不存在一样。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
